User Story 
    - address the next user story 
        As a user who owns a listing, I want the option to delete a listing I created, in case the property is no longer available.

    - delete functionality will require a few security measures 

    - the owner section of our show page condtionally renders a message based on the listing's owner
    - this code will be useful for the delete button, as it should only be show to the listing's owner

    - in addition to conditionally rendering the delete button, we'll add an extra layer of security in our controller action
    - this protected controller action will prevent unauthorized users from deleting listings
    - should a user attempt to delete a listing they don't own, they will receive a message: "you don't have permission to do that"

    - the term protected controller action refers a controller action that is secured through an authentication or authorization check
    - that means that only users who meet certain criteria can access the functionality of that route

Conceptualize the Route 
    - should listen for DELETE requests on /listings/:listingId 

        Action | What It Does             | HTTP Verbs | Route
        Delete | Delete a single listing  | DELETE     | /listings/:listingId

Building the UI
    - to add the UI that issues this request, make small change in views/listings/show.ejs

    - used conditional rendering based on ownership as the option for deleting a listing should only appear for the listing's owner
    - will update this code with a <button> and a <form>
    - the <form> tag will be used to override the default POST request with a DELETE 

    > in views/listings/show.ejs, update the if block with the following:

        <!-- views/listings/show.ejs -->

        <% if (listing.owner._id.equals(user._id)) { %>
        <p>You own this!</p>

        <form action="/listings/<%= listing._id %>?_method=DELETE" method="POST">
          <button type="submit">Delete this listing</button>
        </form>

        - make sure to include listing._id in the request, we'll need this to identify the listing that needs to be removed in our controller action 

Scaffolding the Function 
    - build the scaffolding for our controller function
    - this will help us verify:
        1. the listingId is correctly passed through req.params
        2. the user object is accessible via req.session
    
    > add the following to controllers/listings.js 
        // controllers/listings.js

        router.delete('/:listingId', async (req, res) => {
          try {
            console.log('listingId: ', req.params.listingId);
            console.log('user: ', req.session.user);
            res.send(`A DELETE request was issued for ${req.params.listingId}`);
          } catch (error) {
            console.log(error);
            res.redirect('/');
          }
        });
    > click delete and check terminal for logged data

Writing the Controller Action 
    - now that we have confirmed access to req.params.listingId and req.session.user._id, let's complete the controller action
    - controller action should accomplish the following:
        1. retrieve a specific listing using its ObjectId 
        2. verify permissions by comparing the owner property of the listing with req.session.user._id
            - if the user making the request is not the owner, they should receive the message: "you don't have permission to do that"
        3. if the user is the owner,  the listing should be removed from the database using the deleteOne() method 
    
    Retrieving the Listing 
        > retrieve the listing using the findById() method
            // controllers/listings.js

            router.delete('/:listingId', async (req, res) => {
              try {
                const listing = await Listing.findById(req.params.listingId);
                res.send(`A DELETE request was issued for ${req.params.listingId}`);
              } catch (error) {
                console.log(error);
                res.redirect('/');
              }
            });
    
    Implementing a Permission Check 
        > address the permission updating the function with the following if...else 
            // controllers/listings.js

            router.delete('/:listingId', async (req, res) => {
              try {
                const listing = await Listing.findById(req.params.listingId);

                if (listing.owner.equals(req.session.user._id)) {
                console.log('Permission granted');
                } else {
                console.log('Permission denied');
                }

                res.send(`A DELETE request was issued for ${req.params.listingId}`);
              } catch (error) {
                console.log(error);
                res.redirect('/');
              }
            });

    Delete the Listing
        - explore the deleteOne() method - https://mongoosejs.com/docs/5.x/docs/api/model.html#model_Model.deleteOne
        - when called on a document instance, deleteOne() removes that document from the database 
            const docInstance = await Model.findById(req.params.modelId)
            docInstance.deleteOne()

            - the deleteOne() method can also be called on the model
            - in this context, it requires an object specifying the criteria to identify the document for deletion
            - the first document that matches these conditions is removed from the database
            - we're not using this approach because we need to verify user permission before deletion 
        > update the function 
            // controllers/listings.js

            router.delete('/:listingId', async (req, res) => {
              try {
                const listing = await Listing.findById(req.params.listingId);
                if (listing.owner.equals(req.session.user._id)) {
                await listing.deleteOne();
                res.redirect('/listings');
                } else {
                res.send("You don't have permission to do that.");
                }
              } catch (error) {
                console.error(error);
                res.redirect('/');
              }
            });
